#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <esp_log.h>

#include <driver/i2c_master.h>
#include <driver/i2c_slave.h>

#define I2C_MASTER_SCL_IO GPIO_NUM_22  // I2C clock pin
#define I2C_MASTER_SDA_IO GPIO_NUM_21  // I2C data pin
#define I2C_MASTER_NUM I2C_NUM_0       // I2C port number
#define I2C_MASTER_FREQ_HZ 400      // I2C frequency
#define DS3231_ADDR 0x68               // DS3231 I2C address
#define DATA_LENGTH 7

uint8_t data_rd[7];
constexpr uint8_t reg = 0x00; 

// Logger tag for ESP-IDF logging
static const char *TAG = "app_main";

extern "C" void app_main();

i2c_master_dev_handle_t dev_handle;

static uint8_t bcd2dec(uint8_t val)
{
    return (val >> 4) * 10 + (val & 0x0f);
}

static uint8_t dec2bcd(uint8_t val)
{
    return ((val / 10) << 4) + (val % 10);
}

// Initialize the master bus
void i2c_master_init()
{
    i2c_master_bus_config_t i2c_mst_config {};
    i2c_mst_config.clk_source = I2C_CLK_SRC_DEFAULT;
    i2c_mst_config.i2c_port = I2C_MASTER_NUM;
    i2c_mst_config.scl_io_num = I2C_MASTER_SCL_IO;
    i2c_mst_config.sda_io_num = I2C_MASTER_SDA_IO;
    i2c_mst_config.glitch_ignore_cnt = 7;
    i2c_mst_config.flags.enable_internal_pullup = true;
    i2c_mst_config.intr_priority = 0;

    i2c_master_bus_handle_t bus_handle;

    ESP_ERROR_CHECK(i2c_new_master_bus(&i2c_mst_config, &bus_handle));

    i2c_device_config_t dev_cfg = {
        .dev_addr_length = I2C_ADDR_BIT_LEN_7,
        .device_address = DS3231_ADDR,
        .scl_speed_hz = I2C_MASTER_FREQ_HZ,
    };

    ESP_ERROR_CHECK(i2c_master_bus_add_device(bus_handle, &dev_cfg, &dev_handle));

    uint8_t writebuff[7] = { dec2bcd(0), dec2bcd(0), dec2bcd(0), dec2bcd(0), dec2bcd(0), dec2bcd(0), dec2bcd(0) };
    ESP_ERROR_CHECK(i2c_master_transmit(dev_handle, writebuff, DATA_LENGTH, -1));
}

void app_main(void)
{
    ESP_LOGI(TAG, "Testing i2c master for reading DS3231.");

    i2c_master_init();
    for (;;)
    {
        // Set the read register to 0x00 and read data
        ESP_ERROR_CHECK(i2c_master_transmit_receive(dev_handle, &reg, 1, data_rd, DATA_LENGTH, -1));

        // Convert BCD to decimal
        printf("Read: %d,%d,%d,%d,%d,%d,%d :: ", data_rd[0], data_rd[1], data_rd[2], data_rd[3], data_rd[4], data_rd[5], data_rd[6]);
        uint8_t seconds = bcd2dec(data_rd[0]);
        uint8_t minutes = bcd2dec(data_rd[1]);
        uint8_t hours = bcd2dec(data_rd[2]);

        // Print time
        printf("Time: %02d:%02d:%02d\n", hours, minutes, seconds);
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}
